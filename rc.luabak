
-- @file awesomerc.lua
-- @author Gigamo &lt;gigamo@gmail.com&gt;
-------------------------------------------------------------------------------

-- {{{1 Tables

tags      = { }
statusbar = { }
promptbox = { }
taglist   = { }
layoutbox = { }
mytasklist = { }
settings  = { }

-- {{{1 Imports

require('awful')
require('awful.autofocus')
require('awful.rules')
require('beautiful')
require('naughty')
require('vicious')
require('revelation')

-- Load theme
--beautiful.init("/usr/share/awesome/themes/vinyl/theme.lua")
beautiful.init("/usr/share/awesome/themes/custom/theme.lua")


-- {{{1 Variables

settings.modkey  = 'Mod1'
--settings.term    = 'urxvt'
settings.term    = 'xterm'
settings.browser = 'firefox'
settings.layouts =
{
    awful.layout.suit.tile,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.max,
    awful.layout.suit.magnifier,
    awful.layout.suit.floating
}

-- {{{1 Tags

tags.settings = {
    { name = 'mail', layout = settings.layouts[1]  },
    { name = 'ff',  layout = settings.layouts[1]  },
    { name = '3',  layout = settings.layouts[1]  },
    { name = '4',   layout = settings.layouts[1] },
    { name = '5',   layout = settings.layouts[1] },
    { name = '6',   layout = settings.layouts[1] },
    { name = '7',   layout = settings.layouts[1] },
    --{ name = '8',   layout = settings.layouts[1] },
    --{ name = '9',   layout = settings.layouts[1] },
    --{ name = 'misc',   layout = settings.layouts[1] },
    --{ name = 'misc',   layout = settings.layouts[1] },
    --{ name = 'misc',   layout = settings.layouts[1] },

}

for s = 1, screen.count() do
    tags[s] = {}
    for i, v in ipairs(tags.settings) do
        tags[s][i] = tag({ name = v.name })
        tags[s][i].screen = s
        awful.tag.setproperty(tags[s][i], 'layout', v.layout)
        awful.tag.setproperty(tags[s][i], 'mwfact', v.mwfact)
        awful.tag.setproperty(tags[s][i], 'hide',   v.hide)
    end
    tags[s][1].selected = true
end

-- {{{1 Widgets
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))


-- CPU usage widget
cpuwidget = awful.widget.graph()
cpuwidget:set_width(50)
cpuwidget:set_height(22)
cpuwidget:set_background_color("#494B4F")
cpuwidget:set_color("#FF5656")
cpuwidget:set_gradient_colors({ "#FF5656", "#88A175", "#AECF96" })

cpuwidget_t = awful.tooltip({ objects = { cpuwidget.widget },})

-- Register CPU widget
vicious.register(cpuwidget, vicious.widgets.cpu, 
                    function (widget, args)
                        cpuwidget_t:set_text("CPU Usage: " .. args[1] .. "%")
                        return args[1]
                    end)
cpuicon = widget({ type = "imagebox" })
cpuicon.image = image("/usr/share/icons/oxygen/48x48/devices/cpu.png")








--netwidget = widget({ type = "textbox" })
--vicious.register(netwidget, vicious.widgets.net, "<span foreground='orange'>net:</span><span color='green'>${eth0 down_kb}</span> <span color='green'>${eth0 up_kb}</span>", 3)
--vicious.register(netwidget, vicious.widgets.net, "( <span foreground='white'>D</span>${eth0 down_kb} <span foreground='white'> U</span>${eth0 up_kb} )", 2)
--neticon = widget({ type = "imagebox" })
--neticon.image = image("/usr/share/icons/gnome/48x48/devices/network-wired.png")

spacer = widget({type = "textbox"})
separator = widget({type = "textbox"})
memory = widget({type = "textbox"})
memory.text = "mem "
spacer.text = " "
separator.text = "|"

-- RAM usage widget
memwidget = awful.widget.progressbar()
memwidget:set_width(10)
memwidget:set_height(22)
memwidget:set_vertical(true)
memwidget:set_background_color('#494B4F')
memwidget:set_color('#AECF96')
memwidget:set_gradient_colors({ '#AECF96', '#88A175', '#FF5656' })

-- RAM usage tooltip
memwidget_t = awful.tooltip({ objects = { memwidget.widget },})

vicious.cache(vicious.widgets.mem)
vicious.register(memwidget, vicious.widgets.mem,
                function (widget, args)
                    memwidget_t:set_text(" RAM: " .. args[2] .. "MB / " .. args[3] .. "MB ")
                    return args[1]
                 end, 13)


--dioicon = widget({ type = "imagebox" })
--dioicon.image = image("/usr/share/icons/gnome/48x48/devices/drive-harddisk.png")
--diowidget = widget({ type = "textbox" })
--vicious.register(diowidget, vicious.widgets.dio, '<span color="#FFFFFF">${sda read_mb}</span>/<span color="#C0C0C0">${sda write_mb}</span>', 3)





-- {{{ Battery state
baticon = widget({ type = "imagebox" })
baticon.image = image("/usr/share/icons/gnome/48x48/devices/battery.png")
-- Initialize widget
batwidget = widget({ type = "textbox" })
-- Register widget
vicious.register(batwidget, vicious.widgets.bat, "$2% ", 60, "BAT0")



-- Weather widget
weatherwidget = widget({ type = "textbox" })
weather_t = awful.tooltip({ objects = { weatherwidget },})

vicious.register(weatherwidget, vicious.widgets.weather,
                function (widget, args)
                    weather_t:set_text("City: " .. args["{city}"] .."\nWind: " .. args["{windmph}"] .. "mp/h " .. args["{wind}"] .. "\nSky: " .. args["{sky}"] .. "\nHumidity: " .. args["{humid}"] .. "%")
                    return args["{tempf}"] .. "Â°" ..  "F"
                end, 600, "KIAD")
                --'1800': check every 30 minutes.
                --'CYUL': the Montreal ICAO code.









systray       = widget({ type = 'systray' })

thermicon = widget({ type = "imagebox" })
thermicon.image = image("/home/dglidden/.config/awesome/thermometer.png")

clockwidget   = awful.widget.textclock({ align = 'right' })

taglist.buttons = awful.util.table.join(
    awful.button({ }, 1, awful.tag.viewonly),
    awful.button({ }, 3, awful.tag.viewtoggle),
    awful.button({ settings.modkey }, 1, awful.client.movetotag),
    awful.button({ settings.modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)

    )

for s = 1, screen.count() do
    promptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    layoutbox[s] = awful.widget.layoutbox(s)
    layoutbox[s]:buttons(awful.util.table.join(
                         awful.button({ }, 1, function () awful.layout.inc(settings.layouts, 1) end),
                         awful.button({ }, 3, function () awful.layout.inc(settings.layouts, -1) end)
    ))
    taglist[s] = awful.widget.taglist.new(s, awful.widget.taglist.label.all, taglist.buttons)
   -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

    statusbar[s] = awful.wibox(
    {
        position = 'top',
        height = '24',
        fg = beautiful.fg_normal,
        bg = beautiful.bg_normal,
        screen = s
    })
    statusbar[s].widgets =
    {
        {
            taglist[s],
            promptbox[s],
		spacer,
            layoutbox[s],
		spacer,
		spacer,
		spacer,
            layout = awful.widget.layout.horizontal.leftright
        },
        clockwidget,
	spacer,
	spacer,
        systray,
        spacer,
	batwidget,	
	baticon,
	spacer,
	separator,
	spacer,
        weatherwidget,
	thermicon,
        spacer,
	separator,
        spacer,
        cpuwidget.widget,
	cpuicon,
        spacer,
        separator,
        spacer,
        memwidget.widget,
	memory,
        spacer,
        --separator,
        --spacer,
 --       netwidget,
--	neticon,
 --       spacer,
--	separator,
--	spacer,
	--diowidget,
--	dioicon,
--	spacer,
	mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }
end

-- {{{1 Binds

root.buttons(awful.util.table.join(
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))

globalkeys = awful.util.table.join(
    awful.key({ settings.modkey            }, 'Left',  awful.tag.viewprev),
    awful.key({ settings.modkey            }, 'Right', awful.tag.viewnext),
    awful.key({ settings.modkey,           }, 'Escape',awful.tag.history.restore),
   awful.key({settings.modkey}, "e", revelation),
    awful.key({ settings.modkey            }, 'Return',     function () awful.util.spawn(settings.term) end),
    --awful.key({ settings.modkey            }, 'f',     function () awful.util.spawn(settings.browser) end),
    --awful.key({ settings.modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ settings.modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    
    awful.key({ settings.modkey, 'Control' }, 'r',     awesome.restart),
    awful.key({ settings.modkey, 'Shift'   }, 'q',     awesome.quit),
    awful.key({ settings.modkey,           }, 'j',     function ()
        awful.client.focus.byidx( 1)
        if client.focus then client.focus:raise() end
    end),
    awful.key({ settings.modkey,           }, 'k',     function ()
        awful.client.focus.byidx(-1)
        if client.focus then client.focus:raise() end
    end),
    awful.key({ settings.modkey, "Shift" },           "x",     function () awful.util.spawn("xscreensaver-command -activate") end),
    awful.key({ settings.modkey, 'Shift'   }, 'j',    function () awful.client.swap.byidx(1) end),
    awful.key({ settings.modkey, 'Shift'   }, 'k',    function () awful.client.swap.byidx(-1) end),
    awful.key({ settings.modkey, 'Shift' }, '.',    function () awful.screen.focus_relative(1) end),
    awful.key({ settings.modkey, 'Shift' }, ',',    function () awful.screen.focus_relative(-1) end),
 --awful.key({ settings.modkey,           }, ",",      function(c) awful.client.movetoscreen(c,c.screen-1) end ),
 --awful.key({ settings.modkey,           }, ".",      function(c) awful.client.movetoscreen(c,c.screen+1) end ),
    awful.key({ settings.modkey,           }, 'u',    awful.client.urgent.jumpto),
    awful.key({ settings.modkey,           }, 'Tab',  function ()
        awful.client.focus.history.previous()
        if client.focus then client.focus:raise() end
    end),
    awful.key({ settings.modkey            }, 'l',     function () awful.tag.incmwfact(0.025) end),
    awful.key({ settings.modkey            }, 'h',     function () awful.tag.incmwfact(-0.025) end),
    awful.key({ settings.modkey, 'Shift'   }, 'h',     function () awful.client.incwfact(0.05) end),
    awful.key({ settings.modkey, 'Shift'   }, 'l',     function () awful.client.incwfact(-0.05) end),
    awful.key({ settings.modkey, 'Control' }, 'h',     function () awful.tag.incnmaster(1) end),
    awful.key({ settings.modkey, 'Control' }, 'l',     function () awful.tag.incnmaster(-1) end),
    awful.key({ settings.modkey            }, 'space', function () awful.layout.inc(settings.layouts, 1) end),
    awful.key({ settings.modkey, 'Shift'   }, 'space', function () awful.layout.inc(settings.layouts, -1) end),
    awful.key({ settings.modkey            }, 'r',     function () promptbox[mouse.screen]:run() end),
    awful.key({ settings.modkey            }, 'p',     function () promptbox[mouse.screen]:run() end)
)

clientkeys = awful.util.table.join(
    awful.key({ settings.modkey, 'Shift'   }, 'c',     function (c) c:kill() end),
    --awful.key({ settings.modkey            }, 'c',     function (c) c:kill() end),
    awful.key({ settings.modkey, 'Control' }, 'space', awful.client.floating.toggle),
    awful.key({ settings.modkey, 'Shift'   }, 'r',     function (c) c:redraw() end),
    awful.key({ settings.modkey            }, 't',     awful.client.togglemarked),
    awful.key({ settings.modkey           }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end),
    awful.key({ settings.modkey            }, 'm',     function (c)
        c.maximized_horizontal = not c.maximized_horizontal
        c.maximized_vertical   = not c.maximized_vertical
    end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ settings.modkey }, '#' .. i + 9, function ()
            screen = mouse.screen
            if tags[screen][i] then
                awful.tag.viewonly(tags[screen][i])
            end
        end),
        awful.key({ settings.modkey, 'Control' }, '#' .. i + 9, function ()
            screen = mouse.screen
            if tags[screen][i] then
                awful.tag.viewtoggle(tags[screen][i])
            end
        end),
        awful.key({ settings.modkey, 'Shift' }, '#' .. i + 9, function ()
            if client.focus and tags[client.focus.screen][i] then
                awful.client.movetotag(tags[client.focus.screen][i])
            end
        end),
        awful.key({ settings.modkey, 'Control', 'Shift' }, '#' .. i + 9, function ()
            if client.focus and tags[client.focus.screen][i] then
                awful.client.toggletag(tags[client.focus.screen][i])
            end
        end)
    )
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ settings.modkey }, 1, awful.mouse.client.move),
    awful.button({ settings.modkey }, 3, awful.mouse.client.resize)
)

root.keys(globalkeys)

-- {{{1 Rules


awful.rules.rules =
{
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = true,
                     keys = clientkeys,
                     buttons = clientbuttons } },
 --{ rule = { class = "URxvt" }, properties = { opacity = 0.8 } }, 
 --{ rule = { class = "Firefox" },  properties = {tag = tags[1][3]}},

 { rule = { class = "Lotus Notes" },  properties = {tag = tags[1][2]}},
 { rule = { class = "Pidgin" },  properties = {tag = tags[1][1]}},

    { rule = { class = 'MPlayer' },
      properties = { floating = true } },
    { rule = { class = 'gimp' },
      properties = { floating = true } },
    
 --   { rule = { class = 'audacious' },
--	properties = {  border_width = 0, floating = true, opacity = 0.50 } },
--[[rule = {class = "Audacious"}, 
 properties = {opacity = 0.8} }
--]]

}

-- {{{1 Signals
--[[
client.add_signal(

   "focus",

   function(c)

      if c.class:lower():find("xterm") or c.class:lower():find("emacs") then

         c.border_color = beautiful.border_focus

         c.opacity = 0.97
      else
         c.border_color = beautiful.border_focus

         c.opacity = 1


      end

	
	      if c.class:lower():find("audacious") or c.class:lower():find("Audacious") then

         c.border_color = beautiful.border_focus

         c.border_width = 0
		end


   end)

client.add_signal(

   "unfocus",

   function(c)

      --if c.class:lower():find("xterm") or c.class:lower():find("firefox") then

         c.border_color = beautiful.border_normal

         c.opacity = 0.75

   --   end

   end)
--]]
client.add_signal('manage', function (c, startup)
    -- Enable sloppy focus
    c:add_signal('mouse::enter', function (c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
           and awful.client.focus.filter(c) then
               client.focus = c
        end
    end)

    if not startup then
        awful.client.setslave(c)
        awful.placement.no_overlap(c)
        awful.placement.no_offscreen(c)
    end

    c.size_hints_honor = false
end)

client.add_signal('focus', function(c) c.border_color = beautiful.border_focus end)
client.add_signal('unfocus', function(c) c.border_color = beautiful.border_normal end)

-- {{{1 Functions




io.stderr:write("\n\rAwesome loaded at "..os.date('%B %d, %H:%M').."\r\n\n")


--awful.util.spawn_with_shell("xrandr --output VGA2 --right-of LVDS1 --primary")
awful.util.spawn_with_shell("sudo killall nm-applet;sudo nm-applet&")
